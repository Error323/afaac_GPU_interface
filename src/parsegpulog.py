""" Script to generate plots of relevant parameters from a log file as 
    generated by the stderr and stdout of the GPU correlator:
	Usage: $ <corr_cmd> 2>&1 | tee output.log
	       $ parsegpulog output.log
	pep/28Oct14
"""

import sys;
import re;
import numpy;
import datetime;
from pylab import *;

keywords = ['exec', 'stats'];
if __name__ == "__main__":
	print '--> Operating on log file ', sys.argv[1];
	lineno = 0;
	fl_prog = re.compile ('\[(\d+)s, (\d+)\], stats (\d+)-(\d+); flagged: ([-+]?(\d+(\.\d*)?))% \((\d+)\)');
	tim_prog = re.compile ('time: \[(\d+)s, (\d+)\], late: ([-+]?(\d+(\.\d*)?))s, exec: ([-+]?(\d+(\.\d*)?))');
	max_size = 300000;

	tim = numpy.zeros (max_size, dtype=numpy.int);
	t_late = numpy.zeros (max_size, dtype=numpy.float);
	t_exec = numpy.zeros (max_size, dtype=numpy.float);
	st_tim = numpy.zeros ((6, max_size), dtype=numpy.float);
	st_flag = numpy.zeros ((6, max_size), dtype=numpy.float);

	with open (sys.argv[1], 'r') as f:
		for line in f:
			if keywords[0] in line:
				mat = tim_prog.match (line);
				# print 'Extracted: ', int(mat.group(1));
				tim[lineno] = int(mat.group(1));
				t_late[lineno] = float(mat.group(3));
				t_exec[lineno] = float(mat.group(6));
				lineno = lineno+1;

#				strsplit = line.split (',');
#				tim[lineno] = int((strsplit[0].split(':')[1])[2:-1]); # Unix sec
#				t_late = float(strsplit[2].split(':')[1][:-1]);
#				t_exec = float (strsplit[3].split(':')[1][:-1]);

			elif keywords[1] in line:
				# simulate sscanf (line, "[%ds, %d], stats %d-%d; flagged: %d%% (%d)", 
				#                  &unixtim, &bsn, &dip0, &dip1, &flagpercent, &dummy)
				mat = fl_prog.match (line);
				st = int(mat.group(3))/48;
				if st < 0 | st > 6:
					print '### Station: ', st;
				st_tim[st][lineno] = mat.group(1); # Time of this record
				st_flag[st][lineno] = mat.group(5); # % data flagged.
				# lineno = lineno+1;
				
			else:
				continue;

	print '--> Parsed ', lineno, ' lines.';
	print '--> Start time:', datetime.datetime.fromtimestamp(tim[0]).strftime('%Y-%m-%d %H:%M:%S')
	print '--> End   time:', datetime.datetime.fromtimestamp(tim[lineno-1]).strftime('%Y-%m-%d %H:%M:%S')

	# Start plotting
	figure(1);
	subplot (2,2,1);
	plot (tim[1:lineno], t_late[1:lineno]); # Ignore first record
	xlabel ('Time'); ylabel ('Late');
	subplot (2,2,2);
	hist(t_late[1:lineno]);

	subplot (2,2,3);
	plot (tim[1:lineno], t_exec[1:lineno]);
	xlabel ('Time'); ylabel ('Exec');
	subplot (2,2,4);
	hist(t_exec[1:lineno]);

	figure(2);
	for st in range (0,12):
		subplot (2,6,st);
		plot (tim[1:lineno], st_flag[st][0:lineno]);
		xlabel ('Time'); ylabel ('Flag %');

		subplot (2,6,6+st);
		hist (st_flag[st][0:lineno]);
	show();
